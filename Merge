/*
Newton Pham	
CSc 2720 Lab 5
Lab time: 3-3:50PM
Due time: 2/12 11:59PM
*/
package lab5;
import java.util.*;

public class MergeSort 
{
	public static int dedupe(int[] x, int n) //last method asking for the array and its length 
	{
		int j = 0;
		for (int i = 0; i<n-1; i++) //this algorithm has a time complexity of O(n)
		{
			if (x[i] != x[i+1]) 
			{
				x[j++] = x[i];
			}
		}
		x[j++] = x[n-1];
		return j;
	}
	public static void mergeSort(int[] a, int n) //this is the actual method to separate the array
	{                                            //into a right and left side to sort then later on
	    if (n < 2)                               //get merged with method merge()
	    {                             
	        return;                               
	    }                                          
	    int mid = n / 2;
	    int[] l = new int[mid];
	    int[] r = new int[n - mid];

	    for (int i = 0; i < mid; i++) 
	    {
	        l[i] = a[i];
	    }
	    for (int i = mid; i < n; i++) 
	    {
	        r[i - mid] = a[i];
	    }
	    mergeSort(l, mid);
	    mergeSort(r, n - mid);
	    merge(a, l, r, mid, n - mid);
	}
	public static void merge(                                 //this is the method to actually merge the right and left arrays after being sorted separately
			  int[] a, int[] l, int[] r, int left, int right) //time complexity of this is O(nlog2(n))
	{ 	 
			    int i = 0;
			    int j = 0;
			    int k = 0;
			    while (i<left && j<right) 
			    {
			        if (l[i] <= r[j]) 
			        {
			            a[k++] = l[i++];
			        }
			        else {
			            a[k++] = r[j++];
			        }
			    }
			    while (i < left) 
			    {
			        a[k++] = l[i++];
			    }
			    while (j < right) 
			    {
			        a[k++] = r[j++];
			    }
			}
	static void printmerge(int[] arr) //print method for the merge sorting
	{
		int n = arr.length;
		for (int i=0; i<n; i++) 
		{
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}
	static Scanner scan = new Scanner(System.in);
	public static int[] input() //this is the first step, obtaining an array by the user
	{
		String[] space = null;
		String input = scan.nextLine();
		space = input.split(" ");
		while (space == null || space[0] == " " || space.length == 1) //helps with the test case of
		{                                                             //the user making an insufficient array
			System.out.print("Invalid input, try again: ");
			input = scan.nextLine();
			space = input.split(" ");
		}
		int[] array = new int[space.length];
		for (int i=0; i<space.length; i++) 
		{
			array[i] = Integer.parseInt(space[i]); //because the array starts off as a string, I had to
		}                                          //parse it to make it into actual integers
		return array;
	}
	public static void main(String[] args) //order of methods should start off with creating the array
	{                                      //then the mergesort happens then lastly is the deduplication
		System.out.println("Enter values for your array, put space to separate them: ");
		int[] array = input();
		System.out.println("Array output: " + Arrays.toString(array));
		mergeSort(array, array.length);
		System.out.print("MergeSort array: ");
		printmerge(array);
		int n = array.length; //this is the start of the dedupe method
		int j = 0;
		j = dedupe(array, n);
		System.out.print("DeDuplicated array: ");
		for (int i=0; i<j; i++) //this for loop is just to help print the deduplicated array
		{
			System.out.print(array[i] + " ");
		}
	}
}
